---

- name: Set RHEL Channels
  shell: subscription-manager repos --enable=rhel-7-server-openstack-7.0-director-rpms --enable=rhel-7-server-openstack-7.0-rpms
  # rhel-server-rhscl-7-rpms
  when: not osp_use_partner_repo

- name: Setup Yum Partner Repos
  environment: proxy_env
  get_url: url={{ item.url }} dest=/etc/yum.repos.d/{{ item.name }} force=true
  with_items: "{{ yum_repos }}"
  when: osp_use_partner_repo

# set proxy via kickstart
#- name: Set yum proxy
#  shell: 'grep -q "proxy=" /etc/yum.conf || echo "proxy={{ proxy }}" >> /etc/yum.conf'
#  when: use_yum_proxy

#- name: Set yum timeout
#  shell: 'grep -q "timeout=" /etc/yum.conf || echo "timeout={{ yum_timeout }}" >> /etc/yum.conf'

- name: yum update (the world)
  yum: name=* state=latest update_cache=yes

#- name: Install chrony
#  yum: name=chrony
#
#- name: Enable chronyd service
#  service: name=chronyd state=started enabled=yes

- name: Install python-rdomanager-oscplugin
  yum: name=python-rdomanager-oscplugin

#- name: openstack-tripleo-heat-templates rpm
#  shell: rpm -Uvh --force {{ tripleo_heat_rpm_url }}

- name: Create Stack user
  # password=password
  user: name=stack groups=wheel append=yes password=$6$rounds=100000$AZq2DbEdgByHTu8s$J20qsZT3AcxDB47N.Qoscv6aI91pIsI7pH.yPfMXwDOhgOdf7bqVqoPqexA9mKJuC.kXArdth67Q7AbN8416g.

- name: Check if stack user is in sudo
  stat: path=/etc/sudoers.d/stack
  register: stack_in_sudo

- name: Add Stack user to sudo
  shell: 'echo "Defaults:nova !requiretty\nstack ALL=(root) NOPASSWD:ALL" | tee -a /etc/sudoers.d/stack && chmod 0440 /etc/sudoers.d/stack'
  when: not stack_in_sudo.stat.exists

- name: Disable requiretty
  lineinfile: dest=/etc/sudoers state=absent regexp="^Defaults\ *requiretty"

- name: Add stack user to sudo
  copy:
    content: stack ALL=(root) NOPASSWD:ALL
    dest: /etc/sudoers.d/stack
    mode: 0440


#- name: stack user sudo defaults
#  lineinfile: line="Defaults:nova !requiretty" dest="/etc/sudoers.d/stack" create=yes
#
#- name: stack sudoers
#  lineinfile: line="stack ALL=(root) NOPASSWD:ALL" dest="/etc/sudoers.d/stack" create=no

#- name: Set Proxy
#  shell: 'grep -q {{ item.key }} ~stack/.bash_profile || echo "export {{ item.key }}={{ item.value }}" >> ~stack/.bash_profile'
#  with_dict: "{{ proxy_env }}"

#- name: Setup answer file
- name:  Writing undercloud.conf
  template: src=undercloud.conf dest=/home/stack/undercloud.conf owner=stack group=stack

- name: Install the Undercloud
  sudo_user: stack
  environment: proxy_env
  shell: cd /home/stack && openstack undercloud install
  # up to 2 hours poll every minute
  async: 7200
  poll: 60
  when: deploy_undercloud

- name: Adjust Allowed hosts
  lineinfile: line="\g<1>', '{{ director_node_ssh_ip }}' ]" dest=/etc/openstack-dashboard/local_settings backrefs=yes regexp="^(ALLOWED_HOSTS = .*localhost).*"
  register: update_allowed_hosts

- name: Restart HTTPD
  service: name=httpd state=restarted
  when: update_allowed_hosts|changed

# lets make debugging a little easier
- name: Add 'source stackrc' to .bash_profile
  lineinfile:
    dest: /home/stack/.bash_profile
    line: "source ~/stackrc"
    insertafter: EOF

- name: Add openstack complete to .bash_profile
  lineinfile:
    dest: /home/stack/.bash_profile
    line: "source <(openstack complete)"
    insertafter: EOF

- name: Alias ironic-discoverd reset
  lineinfile:
    dest: /home/stack/.bash_profile
    line: "alias ironic-reset='sudo rm /var/lib/ironic-discoverd/discoverd.sqlite && sudo systemctl restart openstack-ironic-discoverd'"
    insertafter: EOF

- name: Add alias for heat-resources
  lineinfile:
    dest: /home/stack/.bash_profile
    line: "alias heat-resources='heat resource-list overcloud | grep -v COMPLETE'"
    insertafter: EOF

- name: Check if default subnet name is set
  sudo_user: stack
  shell: source /home/stack/stackrc && neutron subnet-list --format csv --quote minimal --column id --column name | grep -q default-subnet
  ignore_errors: true
  register: default_subnet_has_name

- name: Update default subnet name
  sudo_user: stack
  shell: source /home/stack/stackrc && neutron subnet-update $(neutron subnet-list --format csv --quote minimal --column id | sed -n 2p) --name default-subnet
  when: default_subnet_has_name|failed

# this isn't very idempotent
- name: Set DNS Server
  sudo_user: stack
  shell: source /home/stack/stackrc && neutron subnet-update default-subnet --dns-nameserver {{ dns_server_1 }}
  when: default_subnet_has_name|failed
