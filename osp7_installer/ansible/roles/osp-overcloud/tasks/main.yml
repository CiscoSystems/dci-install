---

### write osp_install_run.json
- name: Get osp_install git info
  local_action: shell git describe --always
  register: git_describe

- name: Get undercloud timestamp
  local_action: shell date
  register: undercloud_date

- name:  Write osp_install_run.json
  template: src=osp_install_run.json dest=/etc/osp_install_run.json group=stack
### end write osp_install_run.json

- name: Make templates dir
  sudo_user: stack
  file: path=/home/stack/templates state=directory mode=0755

- name: Make nic-configs dir
  sudo_user: stack
  file: path=/home/stack/templates/nic-configs state=directory mode=0755


#- name: Check existing heat templates
#  stat: path=/home/stack/templates/nic-configs
#  register: nic_templates
#
#- name: Copy default heat templates
#  sudo_user: stack
#  shell: cp -r /usr/share/openstack-tripleo-heat-templates/network/config/single-nic-vlans /home/stack/templates/nic-configs
#  when: nic_templates.stat.isdir is not defined

- name:  Write nic-config templates
  template: src={{ item.template_file }} dest=/home/stack/templates/nic-configs/{{ item.template_file }} owner=stack group=stack
  with_items:
    - { template_file: 'controller.yaml' }
    - { template_file: 'compute.yaml' }

- name:  Write environment files
  template: src={{ item.template_file }} dest=/home/stack/templates/{{ item.template_file }} owner=stack group=stack
  with_items:
#    - { template_file: 'network-environment.yaml' }
    - { template_file: 'networking-cisco-environment.yaml' }
    - { template_file: 'nfs-environment.yaml' }

- name:  Write deploy_overcloud.sh
  template: src=deploy_overcloud.sh dest=/home/stack/bin/deploy_overcloud.sh owner=stack group=stack mode=755


###
# If still needed these commented out bits should be moved to (osp-prep-for-overcloud)
###

###
# Heat Review
###
- name: Check if heat review checked out
  stat: path=/home/stack/heat-review
  register: heat_review

#- name: Checkout heat review patches
#  sudo_user: stack
#  shell: >
#        mkdir -p /home/stack/heat-review &&
#        mkdir /home/stack/heat-review/{{ item.number }} &&
#        cd /home/stack/heat-review/{{ item.number }} &&
#        git init &&
#        git fetch https://review.openstack.org/openstack/tripleo-heat-templates {{ item.ref }} &&
#        git checkout FETCH_HEAD &&
#        git format-patch -n HEAD^ --no-prefix --stdout > /home/stack/{{ item.patch_file }}
#  with_items:
#    - { number: "1", patch_file: 'heat-review-1.patch', ref: "{{ heat_templates_ref_1 }}" }
#  when: heat_review.stat.isdir is not defined

- name:  Write heat-hack.patch
  template: src=heat-hack.patch dest=/home/stack/heat-hack.patch owner=stack group=stack

- name: Check for heat backup
  stat: path=/usr/share/openstack-tripleo-heat-templates.bak
  register: heat_backup

- name: Backup heat templates
  shell: cp -R /usr/share/openstack-tripleo-heat-templates /usr/share/openstack-tripleo-heat-templates.bak
  register: template_backup
  when: heat_backup.stat.isdir is not defined

#- name: Patch heat templates
#  shell: cd /usr/share/openstack-tripleo-heat-templates && patch -p0 < /home/stack/{{ item.patch_file }}
#  with_items:
#    - { patch_file: 'heat-review-1.patch' }
#  when: not template_backup|skipped

- name: Write patch
  template: src=resume_vms_on_boot.patch dest=/home/stack/resume_vms_on_boot.patch owner=stack group=stack

# always copy the original file, so we don't need to worry about the state of the patch
# not idempotent, but not a big deal in this case.
- name: Apply patch to resume VMs on boot
  shell: >
        cp /usr/share/openstack-tripleo-heat-templates.bak/puppet/manifests/overcloud_compute.pp
        /usr/share/openstack-tripleo-heat-templates/puppet/manifests/overcloud_compute.pp &&
        cd /usr/share/openstack-tripleo-heat-templates/puppet/manifests/ &&
        patch < /home/stack/resume_vms_on_boot.patch
  when: resume_guests_state_on_host_boot

###
# Deploy Overcloud
###

- name: Check for existing overcloud
  sudo_user: stack
  shell: source /home/stack/stackrc &&  heat stack-list | grep -q overcloud
  ignore_errors: true
  register: exiting_cloud_check

- name: Install overcloud
  sudo_user: stack
  shell: /home/stack/bin/deploy_overcloud.sh
  # up to 2 hours poll every minute
  async: 7200
  poll: 60
  when: deploy_overcloud and exiting_cloud_check|failed

# Create external network
- name: Create net nova (ext-net)
  sudo_user: stack
  shell: >
        source /home/stack/overcloudrc &&
        neutron nova |
        grep -q nova ||
        neutron net-create nova
        --router:external=True
        --provider:physical_network 'datacentre'
        --provider:network_type flat
  when: not create_ext_net_vlan_provider

- name: Create nova (ext-net) on vlan provider
  sudo_user: stack
  shell: >
        source /home/stack/overcloudrc &&
        neutron net-list |
        grep -q nova ||
        neutron net-create nova
        --router:external=True
        --provider:physical_network {{ 'datacentre' if neutron_external_bridge == neutron_tenant_bridge else 'external' }}
        --provider:network_type vlan
        --provider:segmentation_id {{ neutron_external_vlan }}
  when: create_ext_net_vlan_provider

- name: Create subnet nova (ext-subnet)
  sudo_user: stack
  shell: >
        source /home/stack/overcloudrc &&
        neutron subnet-list |
        grep -q nova ||
        neutron subnet-create
        --name nova
        --disable-dhcp
        --allocation-pool start={{ overcloud_floating_ip_start }},end={{ overcloud_floating_ip_end }}
        --gateway={{ overcloud_floating_ip_network_gateway }}
        nova {{ overcloud_floating_ip_cidr }}
